# -*- coding: utf-8 -*-
"""COVID.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G8eTZXyGexzTnG6OITP0P8Y0GWoKvEX8
"""

pip install pandas-profiling

import pandas as pd
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler
from ydata_profiling import ProfileReport
data=pd.read_csv("/content/covid.csv")
report=ProfileReport(data, title="Covid 19")
report

data=data.dropna()
data=data.drop("Kasus Hari ini",axis=1)
data=data.drop("Sembuh Hari Ini",axis=1) # drop kolom yang tidak diperlukan
data=data.drop("Meninggal Hari Ini",axis=1)
data=data.drop("RI",axis=1)
data=data.drop("Rasio Lacak & Isolasi",axis=1)
data = data.drop(index=35)
data

# Normalisasi Data
kolom_normalisasi = ["Kasus","Sembuh","Kematian","CFR"]
data_to_normalize = data[kolom_normalisasi]

# Normalisasi dengan MinMaxScaler
scaler = MinMaxScaler()
data_normalized = scaler.fit_transform(data_to_normalize)

# Membuat DataFrame hasil normalisasi
data_normalized_df = pd.DataFrame(data_normalized, columns=kolom_normalisasi)
print("\nData setelah normalisasi:")
print(data_normalized_df.head())

# Memilih kolom yang relevan untuk clustering
kolom_clustering = ["Kasus", "Sembuh", "Kematian","CFR"]  # Kolom data Anda
data_clustering = data[kolom_clustering]

# Menentukan jumlah cluster dengan metode Elbow
inertia = []
k_range = range(1, 11)  # Menguji jumlah cluster dari 1 hingga 10
for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(data_normalized)
    inertia.append(kmeans.inertia_)

# Plot metode Elbow
plt.figure(figsize=(8, 5))
plt.plot(k_range, inertia, marker='o')
plt.xlabel('Jumlah Cluster (k)')
plt.ylabel('Inertia')
plt.title('Metode Elbow untuk Menentukan Jumlah Cluster')
plt.show()

# Melakukan clustering dengan jumlah cluster optimal (misalnya, 3)
kmeans = KMeans(n_clusters=3, random_state=42)
data['cluster'] = kmeans.fit_predict(data_normalized)

# Visualisasi hasil clustering
plt.figure(figsize=(10, 7))
sns.scatterplot(
    x=data["Kasus"],
    y=data["Sembuh"],
    hue=data["cluster"],
    palette="viridis"
)
plt.title("Hasil Clustering K-Means")
plt.xlabel("Kasus")
plt.ylabel("Sembuh")
plt.legend(title="Cluster")
plt.show()

from sklearn.metrics import silhouette_score
# Menilai kualitas clustering dengan Silhouette Score
score = silhouette_score(data_normalized, data['cluster'])
print(f"Silhouette Score: {score}")

# Menilai kualitas clustering dengan metode Davies-Bouldin Index (opsional)
from sklearn.metrics import davies_bouldin_score
db_score = davies_bouldin_score(data_normalized, data['cluster'])
print(f"Davies-Bouldin Score: {db_score}")